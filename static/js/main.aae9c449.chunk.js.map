{"version":3,"sources":["Components/Searchbar/Searchbar.js","Service/ApiService.js","Components/ImageGallery/ImageGallery.js","Components/ImageGalleryItem/ImageGalleryItem.js","Components/Modal/Modal.js","Components/Button/Button.js","Components/ImageList/ImageList.js","App.js","index.js"],"names":["Searchbar","state","searchQuery","handleInputChange","e","setState","target","value","handleSubmit","onSubmit","props","preventDefault","trim","alert","this","className","type","onChange","autoComplete","autoFocus","placeholder","Component","ApiService","BASE_URL","API_KEY","searchImages","url","page","perPage","axios","get","then","response","data","hits","catch","error","console","log","_searchQuery","_page","ImageGallery","children","ImageGalleryItem","searchResults","openModal","length","map","id","webformatURL","tags","onClick","src","alt","modalWrapper","document","querySelector","Modal","handleKeyDown","code","onCloseModal","handleClickBackdrop","currentTarget","window","addEventListener","removeEventListener","createPortal","Button","newApiService","ImageList","status","largeImageId","isModalOpen","findLargeImg","find","result","Number","closeModal","onButtonClick","prevState","scrollTo","top","documentElement","scrollHeight","behavior","prevProps","paramLoadMore","color","height","width","largeImageURL","App","handleFormSubmit","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.aae9c449.chunk.js","sourcesContent":["import { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './Searchbar.css'\r\n\r\nclass Searchbar extends Component {\r\n  state = {\r\n    searchQuery: '',\r\n  }\r\n\r\n  static propTypes = {\r\n    onSubmit: PropTypes.func,\r\n  }\r\n\r\n  handleInputChange = (e) => {\r\n    this.setState({ searchQuery: e.target.value })\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    const { onSubmit } = this.props\r\n    const { searchQuery } = this.state\r\n\r\n    e.preventDefault()\r\n\r\n    if (searchQuery.trim() === '') {\r\n      alert('please type your query')\r\n      return\r\n    }\r\n    onSubmit(searchQuery)\r\n    this.setState({ searchQuery: '' })\r\n  }\r\n\r\n  render() {\r\n    const { searchQuery } = this.state\r\n    const { handleSubmit, handleInputChange } = this\r\n    return (\r\n      <header className='Searchbar'>\r\n        <form className='SearchForm' onSubmit={handleSubmit}>\r\n          <button type='submit' className='SearchForm-button'>\r\n            <span className='SearchForm-button-label'>Search</span>\r\n          </button>\r\n\r\n          <input\r\n            className='SearchForm-input'\r\n            type='text'\r\n            value={searchQuery}\r\n            onChange={handleInputChange}\r\n            autoComplete='off'\r\n            autoFocus\r\n            placeholder='Search images and photos'\r\n          />\r\n        </form>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Searchbar\r\n","import axios from 'axios'\r\n\r\nexport class ApiService {\r\n  constructor(BASE_URL, API_KEY) {\r\n    this.BASE_URL = BASE_URL\r\n    this.API_KEY = API_KEY\r\n    this._searchQuery = ''\r\n    this._page = 1\r\n    this.perPage = 12\r\n  }\r\n\r\n  get searchQuery() {\r\n    return this._searchQuery\r\n  }\r\n\r\n  set searchQuery(value) {\r\n    return (this._searchQuery = value)\r\n  }\r\n\r\n  get page() {\r\n    return this._page\r\n  }\r\n\r\n  set page(value) {\r\n    return (this._page += value)\r\n  }\r\n\r\n  resetPage() {\r\n    return (this._page = 1)\r\n  }\r\n\r\n  searchImages = () => {\r\n    let url = `${this.BASE_URL}?q=${this.searchQuery}&page=${this.page}&key=${this.API_KEY}&image_type=photo&orientation=horizontal&per_page=${this.perPage}`\r\n    return axios\r\n      .get(url)\r\n      .then((response) => response.data.hits)\r\n      .catch((error) => {\r\n        console.log(error)\r\n      })\r\n  }\r\n}\r\n","import './ImageGallery.css'\r\n\r\nconst ImageGallery = ({ children }) => {\r\n  return <ul className='ImageGallery'>{children}</ul>\r\n}\r\n\r\nexport default ImageGallery\r\n","import PropTypes from 'prop-types'\r\nimport './ImageGalleryItem.css'\r\n\r\nconst ImageGalleryItem = ({ searchResults, openModal }) => {\r\n  return (\r\n    <>\r\n      {searchResults.length > 0 &&\r\n        searchResults.map(({ id, webformatURL, tags }) => {\r\n          return (\r\n            <li\r\n              key={id}\r\n              id={id}\r\n              onClick={openModal}\r\n              className='ImageGalleryItem'\r\n            >\r\n              <img\r\n                src={webformatURL}\r\n                alt={tags}\r\n                className='ImageGalleryItem-image'\r\n              />\r\n            </li>\r\n          )\r\n        })}\r\n    </>\r\n  )\r\n}\r\n\r\nImageGalleryItem.propTypes = {\r\n  searchResults: PropTypes.array,\r\n  openModal: PropTypes.func,\r\n}\r\n\r\nexport default ImageGalleryItem\r\n","import PropTypes from 'prop-types'\r\nimport './Modal.css'\r\nimport { Component } from 'react'\r\nimport { createPortal } from 'react-dom'\r\n\r\nconst modalWrapper = document.querySelector('#modal-wrapper')\r\n\r\nclass Modal extends Component {\r\n  static propTypes = {\r\n    onCloseModal: PropTypes.func,\r\n    src: PropTypes.string,\r\n    alt: PropTypes.string,\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('keydown', this.handleKeyDown)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('keydown', this.handleKeyDown)\r\n  }\r\n\r\n  handleKeyDown = (e) => {\r\n    if (e.code === 'Escape') {\r\n      this.props.onCloseModal()\r\n    }\r\n  }\r\n\r\n  handleClickBackdrop = (e) => {\r\n    if (e.currentTarget === e.target) {\r\n      this.props.onCloseModal()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return createPortal(\r\n      <div className='Overlay' onClick={this.handleClickBackdrop}>\r\n        <div className='Modal'>\r\n          <img src={this.props.src} alt={this.props.alt} />\r\n        </div>\r\n      </div>,\r\n      modalWrapper\r\n    )\r\n  }\r\n}\r\n\r\nexport default Modal\r\n","import PropTypes from 'prop-types'\r\nimport './Button.css'\r\n\r\nconst Button = ({ onClick }) => {\r\n  return (\r\n    <div className='button-wrapper'>\r\n      <button type='button' className='Button' onClick={onClick}>\r\n        Load more\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nButton.propTypes = {\r\n  onClick: PropTypes.func,\r\n}\r\n\r\nexport default Button\r\n","import { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css'\r\nimport { ApiService } from '../../Service/ApiService'\r\nimport ImageGallery from '../ImageGallery/ImageGallery'\r\nimport ImageGalleryItem from '../ImageGalleryItem/ImageGalleryItem'\r\nimport Modal from '../Modal/Modal'\r\nimport Button from '../Button/Button'\r\nimport Loader from 'react-loader-spinner'\r\nimport './ImageList.css'\r\n\r\nconst BASE_URL = 'https://pixabay.com/api/'\r\nconst API_KEY = '23128758-78bb9bd788fc6e2a491c41576'\r\n\r\nconst newApiService = new ApiService(BASE_URL, API_KEY)\r\n\r\nclass ImageList extends Component {\r\n  state = {\r\n    searchResults: [],\r\n    status: 'idle',\r\n    largeImageId: null,\r\n    isModalOpen: false,\r\n  }\r\n\r\n  static propTypes = {\r\n    searchQuery: PropTypes.string.isRequired,\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { searchQuery } = this.props\r\n    if (prevProps.searchQuery !== searchQuery) {\r\n      this.setState({ status: 'pending' })\r\n      newApiService.searchQuery = searchQuery\r\n      newApiService\r\n        .searchImages()\r\n        .then((searchResults) =>\r\n          this.setState({ searchResults, status: 'resolved' })\r\n        )\r\n        .catch((error) => {\r\n          console.log(error)\r\n          this.setState({ status: 'rejected' })\r\n        })\r\n    }\r\n  }\r\n\r\n  findLargeImg = () => {\r\n    const { searchResults, largeImageId } = this.state\r\n\r\n    const largeImage = searchResults.find((result) => {\r\n      return result.id === largeImageId\r\n    })\r\n    return largeImage\r\n  }\r\n\r\n  openModal = (e) => {\r\n    this.setState({\r\n      isModalOpen: true,\r\n      largeImageId: Number(e.currentTarget.id),\r\n    })\r\n  }\r\n\r\n  closeModal = () => {\r\n    this.setState({ isModalOpen: false })\r\n  }\r\n\r\n  onButtonClick = () => {\r\n    newApiService.page = 1\r\n    newApiService\r\n      .searchImages()\r\n      .then((result) => {\r\n        this.setState((prevState) => ({\r\n          searchResults: [...prevState.searchResults, ...result],\r\n          status: 'resolved',\r\n        }))\r\n      })\r\n      .then(() => {\r\n        window.scrollTo({\r\n          top: document.documentElement.scrollHeight,\r\n          behavior: 'smooth',\r\n        })\r\n      })\r\n      .catch((error) => {\r\n        console.log(error)\r\n        this.setState({ status: 'rejected' })\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const { searchResults, status, isModalOpen, largeImageId } = this.state\r\n    const { openModal, onButtonClick, closeModal, findLargeImg } = this\r\n\r\n    const paramLoadMore = searchResults.length > 0 && searchResults.length >= 12\r\n\r\n    if (status === 'idle') {\r\n      return (\r\n        <div className='info-messages'>\r\n          <p>\r\n            Hello, I have a lot images for you. Just type your query to search\r\n            form\r\n          </p>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (status === 'pending') {\r\n      return (\r\n        <div className='loader-wrapper'>\r\n          <Loader type='TailSpin' color='#00BFFF' height={120} width={120} />\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (status === 'rejected') {\r\n      return (\r\n        <div className='info-messages'>\r\n          <p>Error</p>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (status === 'resolved') {\r\n      return (\r\n        <>\r\n          <ImageGallery>\r\n            <ImageGalleryItem\r\n              searchResults={searchResults}\r\n              openModal={openModal}\r\n            />\r\n          </ImageGallery>\r\n\r\n          {paramLoadMore && <Button onClick={onButtonClick} />}\r\n          {searchResults.length === 0 && (\r\n            <div className='info-messages'>\r\n              <p>There are no images for your query</p>\r\n            </div>\r\n          )}\r\n          {isModalOpen && (\r\n            <Modal\r\n              largeImageId={largeImageId}\r\n              onCloseModal={closeModal}\r\n              src={findLargeImg().largeImageURL}\r\n              alt={findLargeImg().tags}\r\n            ></Modal>\r\n          )}\r\n        </>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default ImageList\r\n","import { Component } from 'react'\nimport './App.css'\nimport Searchbar from './Components/Searchbar/Searchbar'\nimport ImageList from './Components/ImageList/ImageList'\n\nclass App extends Component {\n  state = {\n    searchQuery: '',\n  }\n\n  handleFormSubmit = (searchQuery) => {\n    this.setState({ searchQuery })\n  }\n\n  render() {\n    const { handleFormSubmit } = this\n    const { searchQuery } = this.state\n    return (\n      <div>\n        <Searchbar onSubmit={handleFormSubmit} />\n        <ImageList searchQuery={searchQuery} />\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}